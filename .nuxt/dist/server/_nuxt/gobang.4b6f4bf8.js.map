{"version":3,"file":"gobang.4b6f4bf8.js","sources":["../../../../pages/game/gobang.vue"],"sourcesContent":["<script>\nconst mapWidth = 15;\nlet cleanTable = [];\nfor (let i = 0; i < mapWidth; i++) {\n  cleanTable.push(new Array(mapWidth).fill(\"\"));\n}\n\nexport default {\n  data() {\n    return {\n      cells: cleanTable,\n      historyCells: [],\n      player1: \"‚ö´\",\n      player2: \"üü¢\",\n      turn: \"\",\n      winner: \"\",\n      isDraw: false,\n    };\n  },\n  mounted() {\n    this.turn = this.player1;\n  },\n  computed: {\n    isEmptyHistory() {\n      return this.historyCells.length === 0;\n    },\n    isWin() {\n      return this.winner.length !== 0;\n    },\n  },\n  methods: {\n    checkChess(rIdx, cIdx) {\n      if (!this.isOccupied(rIdx, cIdx)) {\n        const value = this.turn;\n        this.switchTurn();\n        const currentCells = this.cells.map((row) => row.slice()); // deep copy\n        this.historyCells.push(currentCells);\n        this.cells[rIdx][cIdx] = value;\n        this.checkWin(value);\n      } else {\n        console.log(\"ËØ•‰ΩçÁΩÆÂ∑≤Ë¢´Âç†Áî®\");\n      }\n    },\n    isOccupied(rIdx, cIdx) {\n      return this.cells[rIdx][cIdx] !== \"\";\n    },\n    switchTurn() {\n      if (this.turn === this.player1) {\n        this.turn = this.player2;\n      } else {\n        this.turn = this.player1;\n      }\n    },\n    checkWin(lastChess) {\n      // horizontal scanning\n      for (let row of this.cells) {\n        for (let c = 0; c < row.length - 4; c++) {\n          if (row.slice(c, c + 5).every((i) => i === lastChess)) {\n            this.winner = lastChess;\n          }\n        }\n      }\n      // vertical scanning\n      for (let r = 0; r < this.cells.length - 4; r++) {\n        for (let c = 0; c < this.cells.length; c++) {\n          const column = this.cells.map((row, idx) => row[c]);\n          if (column.slice(r, r + 5).every((i) => i === lastChess)) {\n            this.winner = lastChess;\n          }\n        }\n      }\n      // south-east scanning\n      for (let r = 0; r < this.cells.length - 4; r++) {\n        for (let c = 0; c < this.cells.length - 4; c++) {\n          let scanZone = [];\n          for (let i = 0; i < 5; i++) {\n            scanZone.push(this.cells[r + i][c + i]);\n          }\n          if (scanZone.every((i) => i === lastChess)) {\n            this.winner = lastChess;\n          }\n        }\n      }\n      // north-east scanning\n      for (let r = 4; r < this.cells.length; r++) {\n        for (let c = 0; c < this.cells.length - 4; c++) {\n          let scanZone = [];\n          for (let i = 0; i < 5; i++) {\n            scanZone.push(this.cells[r - i][c + i]);\n          }\n          if (scanZone.every((i) => i === lastChess)) {\n            this.winner = lastChess;\n          }\n        }\n      }\n    },\n    refreshMap() {\n      console.log(\"refresh\");\n      let newTable = new Array();\n      for (let i = 0; i < 15; i++) {\n        newTable.push(new Array(15).fill(\"\"));\n      }\n      this.cells = newTable;\n      this.historyCells = [];\n      this.winner = \"\";\n      this.turn = this.player1;\n      this.isDraw = false;\n    },\n    lastTurn() {\n      this.cells = this.historyCells.pop();\n      this.switchTurn();\n      this.winner = \"\";\n      this.isDraw = false;\n    },\n    draw() {\n      this.isDraw = true;\n    },\n  },\n};\n</script>\n\n<template>\n  <div>\n    <div class=\"title\">\n      <Text h1>Gobang Game</Text>\n      <span v-if=\"isDraw\">\n        <h3>ü§úü§õ Draw. Let's have another round!</h3>\n      </span>\n      <span v-else-if=\"!isWin\">\n        <h3>\n          It's {{ turn }} 's turn, ‚è≥ Round {{ parseInt(historyCells.length / 2) + 1 }}\n        </h3>\n      </span>\n      <span v-else>\n        <h3>üéâ The winner is {{ winner }}, Let's have another round!</h3>\n      </span>\n    </div>\n    <div class=\"buttonPanel\">\n      <button class=\"btn green\" @click=\"refreshMap\">Restart</button>\n      <button class=\"btn blue\" @click=\"draw\" :disabled=\"isWin\">Draw</button>\n      <button class=\"btn orange\" @click=\"lastTurn\" :disabled=\"isEmptyHistory\">\n        Undo\n      </button>\n    </div>\n    <div class=\"mapContainer\">\n      <div class=\"chessMap\">\n        <div v-for=\"(row, rIdx) in cells\" :key=\"rIdx\" class=\"row\">\n          <div :class=\"{ disabled: isWin, red: turn === player2 }\" v-for=\"(num, cIdx) in row\" :key=\"cIdx\" class=\"cell\"\n            @click=\"(e) => !isWin && checkChess(rIdx, cIdx)\">\n            {{ num }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.title {\n  text-align: center;\n}\n\n.mapContainer {\n  display: flex;\n  justify-content: center;\n}\n\n.chessMap {\n  display: grid;\n  place-items: center;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  border: 3px solid black;\n}\n\n.buttonPanel {\n  display: flex;\n  justify-content: center;\n  margin: 1rem;\n}\n\n.btn {\n  margin: auto 0.5rem;\n  padding: 0.5rem 2rem;\n  color: white;\n  font-size: 1rem;\n  background-color: rgba(3, 182, 110, 0.845);\n  border: 0;\n  border-radius: 8px;\n}\n\n.btn.green {\n  background-color: rgba(3, 182, 110, 0.845);\n}\n\n.btn.orange {\n  background-color: rgba(255, 153, 0, 0.845);\n}\n\n.btn.blue {\n  background-color: rgba(0, 132, 227, 0.845);\n}\n\n.btn:hover:enabled {\n  opacity: 0.8;\n}\n\n.btn:disabled {\n  background-color: grey;\n  cursor: not-allowed;\n}\n\n.row {\n  display: flex;\n}\n\n.cell {\n  width: 2rem;\n  height: 2rem;\n  border: 1px solid black;\n  display: grid;\n  place-items: center;\n  cursor: pointer;\n}\n\n.cell:hover {\n  background-color: rgb(222, 222, 222);\n}\n\n.cell.red:hover {\n  background-color: rgb(250, 230, 230);\n}\n\n.cell.disabled,\n.cell.disabled:hover {\n  background-color: rgb(230, 250, 245);\n  cursor: not-allowed;\n}\n</style>\n"],"names":["_ssrRenderComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,WAAA;AACA,IAAA,aAAA,CAAA;AACA,SAAA,IAAA,GAAA,IAAA,UAAA,KAAA;AACE,aAAA,KAAA,IAAA,MAAA,QAAA,EAAA,KAAA,EAAA,CAAA;AACF;AAEA,MAAA,YAAA;AAAA,EACE,OAAA;AACE,WAAA;AAAA,MACE,OAAA;AAAA,MACA,cAAA,CAAA;AAAA;;MAGA,MAAA;AAAA,MACA,QAAA;AAAA;;;EAIJ,UAAA;;;EAGA,UAAA;AAAA,IACE,iBAAA;AACE,aAAA,KAAA,aAAA,WAAA;AAAA;IAEF,QAAA;;;;EAIF,SAAA;AAAA,IACE,WAAA,MAAA,MAAA;AACE,UAAA,CAAA,KAAA,WAAA,MAAA,IAAA,GAAA;AACE,cAAA,QAAA,KAAA;AACA,aAAA,WAAA;AACA,cAAA,eAAA,KAAA,MAAA,IAAA,CAAA,QAAA,IAAA,MAAA,CAAA;AACA,aAAA,aAAA,KAAA,YAAA;;AAEA,aAAA,SAAA,KAAA;AAAA;;MAGF;AAAA;IAEF,WAAA,MAAA,MAAA;AACE,aAAA,KAAA,MAAA,MAAA,UAAA;AAAA;;;;;;MAOA;AAAA;IAEF,SAAA,WAAA;;AAGI,iBAAA,IAAA,GAAA,IAAA,IAAA,SAAA,GAAA,KAAA;;AAEI,iBAAA,SAAA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,eAAA,IAAA,GAAA,IAAA,KAAA,MAAA,SAAA,GAAA,KAAA;AACE,iBAAA,IAAA,GAAA,IAAA,KAAA,MAAA,QAAA,KAAA;AACE,gBAAA,SAAA,KAAA,MAAA,IAAA,CAAA,KAAA,QAAA,IAAA,EAAA;;AAEE,iBAAA,SAAA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,eAAA,IAAA,GAAA,IAAA,KAAA,MAAA,SAAA,GAAA,KAAA;AACE,iBAAA,IAAA,GAAA,IAAA,KAAA,MAAA,SAAA,GAAA,KAAA;AACE,cAAA,WAAA,CAAA;AACA,mBAAA,IAAA,GAAA,IAAA,GAAA,KAAA;AACE,qBAAA,KAAA,KAAA,MAAA,IAAA,GAAA,IAAA,EAAA;AAAA,UACF;AACA,cAAA,SAAA,MAAA,CAAA,MAAA,MAAA,SAAA,GAAA;AACE,iBAAA,SAAA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,eAAA,IAAA,GAAA,IAAA,KAAA,MAAA,QAAA,KAAA;AACE,iBAAA,IAAA,GAAA,IAAA,KAAA,MAAA,SAAA,GAAA,KAAA;AACE,cAAA,WAAA,CAAA;AACA,mBAAA,IAAA,GAAA,IAAA,GAAA,KAAA;AACE,qBAAA,KAAA,KAAA,MAAA,IAAA,GAAA,IAAA,EAAA;AAAA,UACF;AACA,cAAA,SAAA,MAAA,CAAA,MAAA,MAAA,SAAA,GAAA;AACE,iBAAA,SAAA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA;;;;AAKA,eAAA,IAAA,GAAA,IAAA,IAAA,KAAA;AACE,iBAAA,KAAA,IAAA,MAAA,EAAA,EAAA,KAAA,EAAA,CAAA;AAAA,MACF;AACA,WAAA,QAAA;AACA,WAAA,eAAA;AACA,WAAA,SAAA;;AAEA,WAAA,SAAA;AAAA;;AAGA,WAAA,QAAA,KAAA,aAAA,IAAA;AACA,WAAA,WAAA;AACA,WAAA,SAAA;AACA,WAAA,SAAA;AAAA;IAEF,OAAA;AACE,WAAA,SAAA;AAAA;;AAGN;;;;AAMY,QAAAA,mBAAA,iBAAA,EAAA,IAAA,GAAA,GAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}